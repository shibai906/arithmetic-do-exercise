迭代器模式
    它是一种非常常用的设计模式，这种模式用于顺序访问集合对象的元素，不需要知道集合对象的
底层表示。它属于行为型模式。
意图：提供一种方法顺序访问一个聚合对象中各个元素，而又无须暴露该对象的内部结构。
解决：不同的方式来遍历整个对象。
设计思想：把在元素之间游走的责任交给迭代器，而不是聚合对象。
接口包含：hasNext，next。
优点：1、支持不同的方式来遍历对象。2、简化了java内部结构。3、在一个类中可以有多个迭代器。
4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。
缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器
类，类的个数成对增加，在一定程序上增加了系统的复杂性。
使用场景：1、不暴露类中的底层机构。2、需要为类提供多种遍历方式。3、为遍历不同的聚合结构题
供一个统一的接口。
思想：迭代器模式分离了集合对象的遍历行为和数据存储行为，将两个行为分开，抽象出一个迭代器来
负责，这样既可以做到不暴露集合的内部结构，又可以让外部代码透明地访问集合内部的数据。