桥梁模式的意思是“将抽象化与实现化脱耦，使得二者可以独立地变化。”两个类之间的关系分为两种，一种是强关联一种是弱关联。强关联是在编译时期就已经确定的，无法在运行时期动态的改变的关联；
弱关联是可以动态地确定并且可以在运行时期动态改变的关联。显然，Java中继承是强关联而聚合是弱关联。耦合就是两个实体的行为的某种强关联，脱耦就是指将他们之间的强关联解除，但是在桥梁模式中
是指将它们之间的强关联改换成弱关联。桥梁模式的精髓就是尽量使用聚合/组合来实现弱关联。

桥梁模式一般由四部分组成：
1、抽象化角色：抽象化给出的定义，并保存一个对实现对象的引用，就像我们常用的父类。
2、修正抽象化角色：扩展抽象化角色，改变和修正父类对抽象化的定义。
3、实现化角色：这个角色给出具体角色的接口，但是不给出具体的实现，这个接口不一定和抽象化角色的接口定义相同。
4、具体实现化角色：这个角色给出实现化角色接口的具体实现，如各种具体的颜色。

优点：
1、分离抽象接口及其实现部分
2、桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。
3、实现细节对客户透明，可以对用户隐藏实现细节。
