个人理解：类似于switch，这个case里面没有，进入下一个case.因为对象逻辑一般处理起来比较复杂，
使用对象处理比较方便。

责任链官方理解为：使多个对象都有处理请求的机会，从而避免了请求的发送者和接收者之间的耦合关系。
将这些对象串成一条链，并沿着这条链一直传递该请求，直到有对象处理它为止。
角色：
抽象处理者角色：该角色对请求进行抽象，并定义一个方法来设计和返回对下一个处理者的引用。
具体处理者：该角色接到请求后，可以选择将请求处理掉，或者将请求传给下一个处理者。由于具体处理者持有对下一个
处理者的引用。因此如果需要，处理者可以访问下一个处理者。
优点：
    1、责任链模式将请求和处理分开，请求者不知道是谁处理的，处理者可以不用知道请求的全貌。
    2、提供系统的灵活性。
缺点：
        1、降低程序的性能。每个请求都是从链头遍历到链尾，当链比较长时，性能会大幅度下降。
        2、不易于调试。由于该模式采用了类似递归的方式，调试时逻辑比较复杂。
使用场景：
    在Struts2的核心空间中有，一般使用多层过滤器中。