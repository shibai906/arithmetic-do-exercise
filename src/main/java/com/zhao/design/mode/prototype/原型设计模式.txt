 我们首先需要构建出一个原型，这个原型可以在现实开发中抽象出来的具体类型，
 但是这个类型与具体的类又不同，需要抽取公共的部分，需通过构建管理器，实现
 创建不同需要的类型。
 使用原型设计模式时，一般使用这三种情况比较方便：
 1、需要处理的对象太多，如果将它们分别作为一个类，必须要编写很多个类文件难以根据类生成实例时。
 2、生成实例的过程太过复杂，很难根据类来生成实例。假设这里有一个实例，即标识用户在
 图形编辑器中使用鼠标制作出的图形的实例。想在程序中创建这样的实例是非常困难的，
 通常，在想生成一个和之前用户通过操作所创建出的实例完全一样的实例的时候，我们
 会事先将用户通过操作所创建出的实例保存起来，然后再需要时通过复制来生成新的实例想
 解耦框架与生成的实例时。
 3、想要生成实例的框架不依赖于具体的类。这时，不能指定类名称来生成实例，而要
 实现“注册”一个“原型”实例，然后通过复制该实例来生成新的实例。

 如代码所示：
 Prototype是由product担任的
 ConcreteProtopyte实现赋值新实例的方法，由具体的你需要的角色来担任
 Client通过调用createClone创建新的实例，由Manager类扮演这个角色。