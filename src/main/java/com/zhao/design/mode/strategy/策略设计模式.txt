 为什么会有这种方式：因为我们在开发中会遇到这样的情况，实现某一个功能时会有多种算法或者策略，我们可以根据应用场景的不同而选择不同的算法或者策略来完成该功能。
    首先我们把一个类A中常改变或者将来可能改变的部分提取出来，作为一个接口B，然后在类A中包含这个接口B，这样类A的实例在运行时可以随意调用实现这个接口类C的行为。
    如一个算法，可以把它封装起来，并且使他们可以相互替换，使得算法可独立于使用它的客户而变化。
优点：可动态改变对象的行为
缺点：客户端必须知道所有的策略类，并自行决定使用哪一个策略类。策略模式将造成很多策略类。
